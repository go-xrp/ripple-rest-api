{
  "components": {
    "schemas": {
      "AccountChannel": {
        "properties": {
          "account": {
            "description": "The address of the source/owner of the payment channels. This corresponds to the account field of the request.",
            "type": "string"
          },
          "amount": {
            "description": "The total amount of XRP, in drops allocated to this channel.",
            "type": "string"
          },
          "balance": {
            "description": "The total amount of XRP, in drops, paid out from this channel, as of the ledger version used. (You can calculate the amount of XRP left in the channel by subtracting balance from amount.)",
            "type": "string"
          },
          "cancel_after": {
            "description": "(May be omitted) Time, in seconds since the Ripple Epoch, of this channel's immutable expiration, if one was specified at channel creation. If this is before the close time of the most recent validated ledger, the channel is expired.",
            "format": "uint64",
            "type": "integer"
          },
          "channel_id": {
            "description": "A unique ID for this channel, as a 64-character hexadecimal string. This is also the ID of the channel object in the ledger's state data.",
            "type": "string"
          },
          "destination_account": {
            "description": "The destination account of the channel, as an Address. Only this account can receive the XRP in the channel while it is open.",
            "type": "string"
          },
          "destination_tag": {
            "description": "(May be omitted) A 32-bit unsigned integer to use as a destination tag for payments through this channel, if one was specified at channel creation. This indicates the payment channel's beneficiary or other purpose at the destination account.",
            "format": "uint32",
            "type": "integer"
          },
          "expiration": {
            "description": "(May be omitted) Time, in seconds since the Ripple Epoch, when this channel is set to expire. This expiration date is mutable. If this is before the close time of the most recent validated ledger, the channel is expired.",
            "format": "uint64",
            "type": "integer"
          },
          "public_key": {
            "description": "(May be omitted) The public key for the payment channel in the XRP Ledger's base58 format. Signed claims against this channel must be redeemed with the matching key pair.",
            "type": "string"
          },
          "public_key_hex": {
            "description": "(May be omitted) The public key for the payment channel in hexadecimal format, if one was specified at channel creation. Signed claims against this channel must be redeemed with the matching key pair.",
            "type": "string"
          },
          "settle_delay": {
            "description": "The number of seconds the payment channel must stay open after the owner of the channel requests to close it.",
            "format": "uint64",
            "type": "integer"
          },
          "source_tag": {
            "description": "(May be omitted) A 32-bit unsigned integer to use as a source tag for payments through this payment channel, if one was specified at channel creation. This indicates the payment channel's originator or other purpose at the source account. Conventionally, if you bounce payments from this channel, you should specify this value in the DestinationTag of the return payment.",
            "format": "uint32",
            "type": "integer"
          }
        },
        "required": [
          "account",
          "amount",
          "balance",
          "cancel_after",
          "channel_id",
          "destination_account",
          "destination_tag",
          "expiration",
          "public_key",
          "public_key_hex",
          "settle_delay",
          "source_tag"
        ],
        "type": "object"
      },
      "AccountChannelsRequest": {
        "properties": {
          "account": {
            "description": "The unique identifier of an account, typically the account's Address. The request returns channels where this account is the channel's owner/source.",
            "type": "string"
          },
          "destination_account": {
            "description": "(Optional) The unique identifier of an account, typically the account's Address. If provided, filter results to payment channels whose destination is this account.",
            "type": "string"
          },
          "ledger_hash": {
            "description": "(Optional) A 20-byte hex string for the ledger version to use. (See Specifying Ledgers)",
            "type": "string"
          },
          "ledger_index": {
            "description": "(Optional) The ledger index of the ledger to use, or a shortcut string to choose a ledger automatically. (See Specifying Ledgers)",
            "type": "string"
          },
          "limit": {
            "description": "(Optional) Limit the number of transactions to retrieve. Cannot be less than 10 or more than 400. The default is 200.",
            "maximum": 400,
            "minimum": 10,
            "type": "integer"
          },
          "marker": {
            "description": "(Optional) Limit the number of transactions to retrieve. Cannot be less than 10 or more than 400. The default is 200.",
            "type": "integer"
          }
        },
        "required": [
          "account"
        ],
        "type": "object"
      },
      "AccountChannelsResponse": {
        "description": "This object contains information about an account's Payment Channels. This includes only channels where the specified account is the channel's source, not the destination. (A channel's \"source\" and \"owner\" are the same.) All information retrieved is relative to a particular version of the ledger.",
        "properties": {
          "account": {
            "description": "The address of the source/owner of the payment channels. This corresponds to the account field of the request.",
            "type": "string"
          },
          "channels": {
            "description": "Payment channels owned by this account.",
            "items": {
              "$ref": "#/components/schemas/AccountChannel"
            },
            "type": "array"
          },
          "ledger_hash": {
            "description": "The identifying Hash of the ledger version used to generate this response.",
            "type": "string"
          },
          "ledger_index": {
            "description": "The Ledger Index of the ledger version used to generate this response.",
            "type": "integer"
          },
          "limit": {
            "description": "(May be omitted) The limit to how many channel objects were actually returned by this request.",
            "type": "integer"
          },
          "marker": {
            "description": "(May be omitted) Server-defined value for pagination. Pass this to the next call to resume getting results where this call left off. Omitted when there are no additional pages after this one.",
            "type": "object"
          },
          "status": {
            "type": "string"
          },
          "validated": {
            "description": "*(May be omitted)* If `true`, the information in this response comes from a validated ledger version. Otherwise, the information is subject to change.",
            "type": "boolean"
          }
        },
        "required": [
          "account",
          "channels",
          "ledger_hash",
          "ledger_index",
          "limit",
          "marker",
          "validated"
        ],
        "type": "object"
      },
      "AccountCurrenciesRequest": {
        "description": "Request parameters to retrieve a list of currencies that an account can send or receive, based on its trust lines. (This is not a thoroughly confirmed list, but it can be used to populate user interfaces.)",
        "properties": {
          "account": {
            "description": "A unique identifier for the account, most commonly the account's Address.",
            "type": "string"
          },
          "ledger_hash": {
            "description": "*(Optional)* A 20-byte hex string for the ledger version to use. (See Specifying Ledgers)",
            "type": "string"
          },
          "ledger_index": {
            "description": "*(Optional)* The ledger index of the ledger to use, or a shortcut string to choose a ledger automatically. (See Specifying Ledgers)",
            "type": "string"
          },
          "strict": {
            "description": "*(Optional)* If `true`, then the `account` field only accepts a public key or XRP Ledger address. Otherwise, account can be a secret or passphrase (not recommended). The default is `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "account"
        ],
        "type": "object"
      },
      "AccountCurrenciesResponse": {
        "description": "A list of currencies that an account can send or receive, based on its trust lines. (This is not a thoroughly confirmed list, but it can be used to populate user interfaces.)",
        "properties": {
          "ledger_hash": {
            "description": "(May be omitted) The identifying hash of the ledger version used to retrieve this data, as hex.",
            "type": "string"
          },
          "ledger_index": {
            "description": "The ledger index of the ledger version used to retrieve this data.",
            "type": "integer"
          },
          "receive_currencies": {
            "description": "Array of Currency Codes for currencies that this account can receive.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "send_currencies": {
            "description": "Array of Currency Codes for currencies that this account can send.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "validated": {
            "description": "If `true`, this data comes from a validated ledger.",
            "type": "boolean"
          }
        },
        "required": [
          "ledger_hash",
          "ledger_index",
          "receive_currencies",
          "send_currencies",
          "validated"
        ],
        "type": "object"
      },
      "AccountInfoQueueData": {
        "properties": {
          "txn_count": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AccountInfoRequest": {
        "properties": {
          "account": {
            "description": "A unique identifier for the account, most commonly the account's Address.",
            "type": "string"
          },
          "ledger_hash": {
            "description": "*(Optional)* A 20-byte hex string for the ledger version to use. (See Specifying Ledgers)",
            "type": "string"
          },
          "ledger_index": {
            "description": "*(Optional)* The ledger index of the ledger to use, or a shortcut string to choose a ledger automatically. (See Specifying Ledgers)",
            "type": "string"
          },
          "queue": {
            "description": "*(Optional)* If `true`, and the FeeEscalation amendment is enabled, also returns stats about queued transactions associated with this account. Can only be used when querying for the data from the current open ledger.",
            "type": "boolean"
          },
          "signer_lists": {
            "description": "*(Optional)* If true, and the MultiSign amendment is enabled, also returns any SignerList objects associated with this account.",
            "type": "boolean"
          },
          "strict": {
            "description": "*(Optional)* If `true`, then the `account` field only accepts a public key or XRP Ledger address. Otherwise, account can be a secret or passphrase (not recommended). The default is `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "account"
        ],
        "type": "object"
      },
      "AccountInfoResponse": {
        "description": "This object contains information about an account, its activity, and its XRP balance. All information retrieved is relative to a particular version of the ledger.",
        "properties": {
          "account_data": {
            "$ref": "#/components/schemas/AccountRoot"
          },
          "ledger_current_index": {
            "description": "*(Omitted if `ledger_index` is provided instead)* The ledger index of the current in-progress ledger, which was used when retrieving this information.",
            "type": "integer"
          },
          "ledger_index": {
            "description": "*(Omitted if `ledger_current_index` is provided instead)* The ledger index of the ledger version used when retrieving this information. The information does not contain any changes from ledger versions newer than this one.",
            "type": "integer"
          },
          "queue_data": {
            "$ref": "#/components/schemas/AccountInfoQueueData"
          },
          "status": {
            "type": "string"
          },
          "validated": {
            "description": "True if this data is from a validated ledger version; if omitted or set to false, this data is not final.",
            "type": "boolean"
          }
        },
        "required": [
          "ledger_current_index",
          "ledger_index",
          "validated"
        ],
        "type": "object"
      },
      "AccountLinesRequest": {
        "properties": {
          "account": {
            "description": "A unique identifier for the account, most commonly the account's Address.",
            "type": "string"
          },
          "ledger_hash": {
            "description": "*(Optional)* A 20-byte hex string for the ledger version to use. (See Specifying Ledgers)",
            "type": "string"
          },
          "ledger_index": {
            "description": "*(Optional)* The ledger index of the ledger to use, or a shortcut string to choose a ledger automatically. (See Specifying Ledgers)",
            "type": "string"
          },
          "limit": {
            "description": "(Optional, default varies) Limit the number of trust lines to retrieve. The server is not required to honor this value. Must be within the inclusive range 10 to 400.",
            "type": "integer",
            "x-addded": "rippled 0.26.4"
          },
          "marker ": {
            "description": "(Optional) Value from a previous paginated response. Resume retrieving data where that response left off.",
            "type": "object",
            "x-addded": "rippled 0.26.4"
          },
          "peer": {
            "description": "(Optional) The Address of a second account. If provided, show only lines of trust connecting the two accounts.",
            "type": "boolean"
          }
        },
        "required": [
          "account"
        ],
        "type": "object"
      },
      "AccountLinesResponse": {
        "description": "This object represents information about an account's trust lines, including balances in all non-XRP currencies and assets. All information retrieved is relative to a particular version of the ledger.",
        "properties": {
          "account": {
            "description": "A unique identifier for the account, most commonly the account's Address.",
            "type": "string"
          },
          "ledger_hash": {
            "description": "(Optional) A 20-byte hex string for the ledger version to use. (See Specifying Ledgers)",
            "type": "string"
          },
          "ledger_index": {
            "description": "(Optional) The ledger index of the ledger to use, or a shortcut string to choose a ledger automatically. (See Specifying Ledgers).",
            "format": "string, uint64",
            "type": "string"
          },
          "limit": {
            "description": "(Optional, default varies) Limit the number of trust lines to retrieve. The server is not required to honor this value. Must be within the inclusive range 10 to 400.",
            "type": "integer"
          },
          "marker": {
            "description": "(Optional) Value from a previous paginated response. Resume retrieving data where that response left off.",
            "type": "object"
          },
          "peer": {
            "description": "(Optional) The Address of a second account. If provided, show only lines of trust connecting the two accounts.",
            "type": "string"
          }
        },
        "required": [
          "account"
        ],
        "type": "object"
      },
      "AccountRoot": {
        "properties": {
          "Account": {
            "description": "The identifying (classic) address of this account.",
            "type": "string",
            "x-internalType": "AccountID"
          },
          "AccountTxnID": {
            "description": "(Optional) The identifying hash of the transaction most recently sent by this account. This field must be enabled to use the AccountTxnID transaction field. To enable it, send an AccountSet transaction with the asfAccountTxnID flag enabled.",
            "type": "string",
            "x-internalType": "Hash256"
          },
          "Balance": {
            "description": "The account's current XRP balance in drops, represented as a string.",
            "type": "string",
            "x-internalType": "Amount"
          },
          "Domain": {
            "description": "(Optional) A domain associated with this account. In JSON, this is the hexadecimal for the ASCII representation of the domain.",
            "type": "string",
            "x-internalType": "Blob"
          },
          "EmailHash": {
            "description": "(Optional) The md5 hash of an email address. Clients can use this to look up an avatar through services such as Gravatar.",
            "type": "string",
            "x-internalType": "Hash128"
          },
          "Flags": {
            "description": "A bit-map of boolean flags enabled for this account.",
            "format": "uint32",
            "type": "integer",
            "x-internalType": "UInt32"
          },
          "LedgerEntryType": {
            "description": "The value 0x0061, mapped to the string AccountRoot, indicates that this is an AccountRoot object.",
            "format": "uint16",
            "type": "string",
            "x-internalType": "UInt16"
          },
          "MessageKey": {
            "description": "(Optional) A public key that may be used to send encrypted messages to this account. In JSON, uses hexadecimal. No more than 33 bytes.",
            "type": "string",
            "x-internalType": "Blob"
          },
          "OwnerCount": {
            "description": "The number of objects this account owns in the ledger, which contributes to its owner reserve.",
            "format": "uint32",
            "type": "integer",
            "x-internalType": "UInt32"
          },
          "PreviousTxnID": {
            "description": "The identifying hash of the transaction that most recently modified this object.",
            "type": "string",
            "x-internalType": "Hash256"
          },
          "PreviousTxnLgrSeq": {
            "description": "The index of the ledger that contains the transaction that most recently modified this object.",
            "format": "uint32",
            "type": "integer",
            "x-internalType": "UInt32"
          },
          "RegularKey": {
            "description": "(Optional) The address of a key pair that can be used to sign transactions for this account instead of the master key. Use a SetRegularKey transaction to change this value.",
            "type": "string",
            "x-internalType": "AccountID"
          },
          "Sequence": {
            "description": "The sequence number of the next valid transaction for this account. (Each account starts with Sequence = 1 and increases each time a transaction is made.)",
            "format": "uint32",
            "type": "integer",
            "x-internalType": "UInt32"
          },
          "TickSize": {
            "description": "(Optional) How many significant digits to use for exchange rates of Offers involving currencies issued by this address. Valid values are 3 to 15, inclusive. (Added by the TickSize amendment.)",
            "format": "uint8",
            "type": "string",
            "x-internalType": "UInt8"
          },
          "TransferRate": {
            "description": "(Optional) A transfer fee  to charge other users for sending currency issued by this account to each other.",
            "format": "uint32",
            "type": "string",
            "x-internalType": "UInt32"
          },
          "WalletLocator": {
            "deprecated": true,
            "description": "*(Optional)* **DEPRECATED.** Do not use.",
            "type": "string",
            "x-internalType": "Hash256"
          },
          "WalletSize": {
            "deprecated": true,
            "description": "*(Optional)* **DEPRECATED.** Do not use.",
            "format": "uint32",
            "type": "string",
            "x-internalType": "UInt32"
          },
          "index": {
            "type": "string"
          }
        },
        "required": [
          "Account",
          "Balance",
          "Flags",
          "LedgerEntryType",
          "OwnerCount",
          "PreviousTxnID",
          "PreviousTxnLgrSeq",
          "Sequence"
        ],
        "type": "object"
      },
      "Ledger": {
        "description": "The complete header data of this ledger. Need to validate `accountState` in response.",
        "properties": {
          "accepted": {
            "type": "boolean"
          },
          "account_hash": {
            "description": "Hash of all account state information in this ledger, as hex",
            "type": "string"
          },
          "close_flags": {
            "type": "integer"
          },
          "close_time": {
            "description": "The time this ledger was closed, in seconds since the Ripple Epoch",
            "format": "int64",
            "type": "integer"
          },
          "close_time_human": {
            "description": "The time this ledger was closed, in human-readable format. Always uses the UTC time zone. 2020-Mar-24 01:41:11.000000000 UTC; 2006-Jan-02 15:04:05.999999999 MST",
            "type": "string"
          },
          "close_time_resolution": {
            "description": "Ledger close times are rounded to within this many seconds.",
            "type": "integer"
          },
          "closed": {
            "description": "Whether or not this ledger has been closed",
            "type": "boolean"
          },
          "hash": {
            "deprecated": true,
            "description": "use ledger_hash instead",
            "type": "string"
          },
          "ledger_hash": {
            "description": "Unique identifying hash of the entire ledger.",
            "type": "string"
          },
          "ledger_index": {
            "description": "The Ledger Index of this ledger, as a quoted integer",
            "type": "string"
          },
          "parent_close_time": {
            "description": "The time at which the previous ledger was closed.",
            "type": "integer"
          },
          "parent_hash": {
            "description": "Unique identifying hash of the ledger that came immediately before this one.",
            "type": "string"
          },
          "seqNum": {
            "deprecated": true,
            "description": "use ledger_index instead",
            "type": "string"
          },
          "totalCoins": {
            "deprecated": true,
            "description": "use total_coins instead",
            "type": "string"
          },
          "total_coins": {
            "description": "Total number of XRP drops in the network, as a quoted integer. (This decreases as transaction costs destroy XRP.)",
            "type": "string"
          },
          "transaction_hash": {
            "description": "Hash of the transaction information included in this ledger, as hex",
            "type": "string"
          }
        },
        "required": [
          "account_hash",
          "close_time",
          "close_time_human",
          "close_time_resolution",
          "closed",
          "hash",
          "ledger_hash",
          "ledger_index",
          "parent_close_time",
          "parent_hash",
          "seqNum",
          "totalCoins",
          "total_coins",
          "transaction_hash"
        ],
        "type": "object"
      },
      "LedgerClosedRequestJsonrpc": {
        "properties": {
          "method": {
            "description": "Set to `ledger_closed`",
            "enum": [
              "ledger_closed"
            ],
            "type": "string"
          }
        },
        "required": [
          "method"
        ],
        "type": "object"
      },
      "LedgerClosedRequestWebsocket": {
        "properties": {
          "command": {
            "enum": [
              "ledger_closed"
            ],
            "type": "string"
          },
          "id": {
            "type": "integer"
          }
        }
      },
      "LedgerClosedResponse": {
        "properties": {
          "ledger_hash": {
            "description": "The unique Hash of this ledger version, in hexadecimal.",
            "type": "string"
          },
          "ledger_index": {
            "description": "The ledger index of this ledger version.",
            "format": "uint64",
            "type": "integer"
          }
        },
        "required": [
          "ledger_hash",
          "ledger_index"
        ],
        "type": "object"
      },
      "LedgerCurrentRequestJsonrpc": {
        "properties": {
          "method": {
            "description": "Set to `ledger_current`",
            "enum": [
              "ledger_current"
            ],
            "type": "string"
          }
        },
        "required": [
          "method"
        ],
        "type": "object"
      },
      "LedgerCurrentRequestWebsocket": {
        "properties": {
          "command": {
            "enum": [
              "ledger_current"
            ],
            "type": "string"
          },
          "id": {
            "type": "integer"
          }
        }
      },
      "LedgerCurrentResponse": {
        "description": "A ledger_hash field is not provided, because the hash of the current ledger is constantly changing along with its contents.",
        "properties": {
          "ledger_current_index": {
            "description": "The ledger index of this ledger version.",
            "format": "uint64",
            "type": "integer"
          }
        },
        "required": [
          "ledger_current_index"
        ],
        "type": "object"
      },
      "LedgerEntryDepositPreauth": {
        "properties": {
          "authorized": {
            "description": "(Required if `deposit_preauth` is specified as an object) The account that received the preauthorization.",
            "format": "address",
            "type": "string"
          },
          "owner": {
            "description": "(Required if `deposit_preauth` is specified as an object) The account that provided the preauthorization.",
            "format": "address",
            "type": "string"
          }
        },
        "required": [
          "authorized",
          "owner"
        ],
        "type": "object"
      },
      "LedgerEntryDirectoryID": {
        "description": "(Optional) Specify a [DirectoryNode](https://xrpl.org/directorynode.html) to retrieve. If a string, must be the object ID of the directory, as hexadecimal. If an object, requires either dir_root or owner as a sub-field, plus optionally a sub_index sub-field.",
        "type": "string"
      },
      "LedgerEntryDirectoryNode": {
        "description": "(Optional) Specify a [DirectoryNode](https://xrpl.org/directorynode.html) to retrieve. If a string, must be the object ID of the directory, as hexadecimal. If an object, requires either dir_root or owner as a sub-field, plus optionally a sub_index sub-field.",
        "properties": {
          "dir_root": {
            "description": "(Required if `directory` is specified as an object and `directory.owner` is not provided) Unique index identifying the directory to retrieve, as a hex string.",
            "type": "string"
          },
          "owner": {
            "description": "(Required if `directory` is specified as an object and `directory.dir_root` is not provided) Unique address of the account associated with this directory.",
            "type": "string"
          },
          "sub_index": {
            "description": "(Optional) If provided, jumps to a later \"page\" of the [DirectoryNode](https://xrpl.org/directorynode.html).",
            "format": "uint64",
            "type": "integer"
          }
        },
        "required": [
          "dir_root",
          "owner"
        ],
        "type": "object"
      },
      "LedgerEntryEscrow": {
        "description": "(Optional) Specify a [DirectoryNode](https://xrpl.org/directorynode.html) to retrieve. If a string, must be the object ID of the directory, as hexadecimal. If an object, requires either dir_root or owner as a sub-field, plus optionally a sub_index sub-field.",
        "properties": {
          "seq": {
            "description": "(Required if escrow is specified as an object) The sequence number of the transaction that created the Escrow object.",
            "format": "uint64",
            "type": "integer"
          },
          "sub_index": {
            "description": "(Required if escrow is specified as an object) The owner (sender) of the Escrow object.",
            "format": "address",
            "type": "string"
          }
        },
        "required": [
          "seq",
          "sub_index"
        ],
        "type": "object"
      },
      "LedgerEntryEscrowID": {
        "description": "(Optional) Specify an Escrow object to retrieve. If a string, must be the object ID of the Escrow, as hexadecimal. If an object, requires owner and seq sub-fields.",
        "type": "string"
      },
      "LedgerEntryRequest": {
        "properties": {
          "check": {
            "description": "(Optional) Specify the [object ID](https://xrpl.org/ledger-object-ids.html) of a [Check object](https://xrpl.org/check.html) to retrieve.",
            "type": "string"
          },
          "deposit_preauth": {
            "description": "(Optional) Specify a DepositPreauth object to retrieve. If a string, must be the object ID of the DepositPreauth object, as hexadecimal. If an object, requires owner and authorized sub-fields.",
            "type": "string",
            "x-investigate": true,
            "x-investigate-notes": "oneOf(string,DepositPreauth)"
          },
          "directory": {
            "description": "(Optional) Specify a [DirectoryNode](https://xrpl.org/directorynode.html) to retrieve. If a string, must be the object ID of the directory, as hexadecimal. If an object, requires either dir_root or owner as a sub-field, plus optionally a sub_index sub-field.",
            "type": "string",
            "x-investigate": true,
            "x-investigate-notes": "onOf(string,DirectoryNode)"
          },
          "escrow": {
            "description": "(Optional) Specify an Escrow object to retrieve. If a string, must be the object ID of the Escrow, as hexadecimal. If an object, requires owner and seq sub-fields",
            "type": "string"
          },
          "index": {
            "description": "(Optional) Specify the [object ID](https://xrpl.org/ledger-object-ids.html) of a single object to retrieve from the ledger.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LedgerEntryResponse": {
        "properties": {
          "index": {
            "description": "The unique ID of this ledger object.",
            "format": "address",
            "type": "string"
          },
          "ledger_index": {
            "description": "The ledger index of the ledger that was used when retrieving this data.",
            "format": "uint64",
            "type": "integer"
          },
          "node": {
            "$ref": "#/components/schemas/LedgerEntryResultNode"
          },
          "node_binary": {
            "description": "(Omitted unless \"binary\":true specified) The binary representation of the ledger object, as hexadecimal.",
            "type": "string"
          }
        },
        "required": [
          "index",
          "ledger_index",
          "node_binary"
        ],
        "type": "object"
      },
      "LedgerEntryResultNode": {
        "properties": {
          "Account": {
            "type": "string"
          },
          "Balance": {
            "type": "string"
          },
          "Flags": {
            "type": "integer"
          },
          "LedgerEntryType": {
            "type": "integer"
          },
          "OwnerCount": {
            "type": "integer"
          },
          "PreviousTxnID": {
            "type": "string"
          },
          "PreviousTxnLgrSeq": {
            "format": "int64",
            "type": "integer"
          },
          "Sequence": {
            "format": "int64",
            "type": "integer"
          },
          "index": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LedgerQueueDatum": {
        "properties": {
          "LastLedgerSequence": {
            "example": 61616015,
            "type": "integer"
          },
          "account": {
            "example": "r3rhWeE31Jt5sWmi4QiGLMZnY3ENgqw96W",
            "type": "string"
          },
          "fee_level": {
            "example": "256",
            "type": "string"
          },
          "preflight_result": {
            "example": "tesSUCCESS",
            "type": "string"
          },
          "retries_remaining": {
            "example": 10,
            "type": "integer"
          },
          "tx": {
            "example": "DCBF41F11E6A17C5C9DDBFAC327F92FBB48545D9B5940BEDAE3B9BCFA4E8976E",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LedgerRequest": {
        "properties": {
          "accounts": {
            "description": "(Optional) Admin required. If true, return information on accounts in the ledger. Ignored if you did not specify a ledger version. Defaults to false. Caution: This returns a very large amount of data!",
            "type": "boolean"
          },
          "binary": {
            "description": "(Optional) If true, and transactions and expand are both also true, return transaction information in binary format (hexadecimal string) instead of JSON format.",
            "type": "boolean"
          },
          "expand": {
            "description": "(Optional) Provide full JSON-formatted information for transaction/account information instead of only hashes. Defaults to false. Ignored unless you request transactions, accounts, or both.",
            "type": "boolean"
          },
          "full": {
            "description": "(Optional) Admin required If true, return full information on the entire ledger. Ignored if you did not specify a ledger version. Defaults to false. (Equivalent to enabling transactions, accounts, and expand.) Caution: This is a very large amount of data -- on the order of several hundred megabytes!",
            "type": "boolean"
          },
          "ledger_hash": {
            "description": "(Optional) A 20-byte hex string for the ledger version to use. (See Specifying Ledgers).",
            "type": "string"
          },
          "ledger_index": {
            "description": "(Optional) The ledger index of the ledger to use, or a shortcut string to choose a ledger automatically. (See Specifying Ledgers)",
            "type": "string"
          },
          "owner_funds": {
            "description": "(Optional) If true, include owner_funds field in the metadata of OfferCreate transactions in the response. Defaults to false. Ignored unless transactions are included and expand is true.",
            "type": "boolean"
          },
          "queue": {
            "description": "(Optional) If true, and the command is requesting the current ledger, includes an array of queued transactions in the results.",
            "type": "boolean"
          },
          "transactions": {
            "description": "(Optional) If true, return information on transactions in the specified ledger version. Defaults to false. Ignored if you did not specify a ledger version.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LedgerResponse": {
        "description": "Information about the public ledger.",
        "properties": {
          "ledger": {
            "$ref": "#/components/schemas/Ledger"
          },
          "ledger_hash": {
            "description": "Unique identifying hash of the entire ledger.",
            "type": "string"
          },
          "ledger_index": {
            "description": "The Ledger Index of this ledger.",
            "type": "number"
          },
          "queue_data": {
            "description": "(Omitted unless requested with the queue parameter) Array of objects describing queued transactions, in the same order as the queue. If the request specified expand as true, members contain full representations of the transactions, in either JSON or binary depending on whether the request specified `binary` as true. Added by the FeeEscalation amendment.",
            "items": {
              "$ref": "#/components/schemas/LedgerQueueDatum"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          },
          "validated": {
            "type": "boolean"
          }
        },
        "required": [
          "ledger_hash",
          "ledger_index",
          "queue_data"
        ],
        "type": "object"
      },
      "QueueTx": {
        "properties": {
          "account": {
            "$ref": "#/components/schemas/Ledger"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "title": "WeCoins Ripple Ledger API",
    "version": "1.0.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/api/ledger/v1.0/account_channels": {
      "post": {
        "description": "This endpoint returns information about an account's Payment Channels. This includes only channels where the specified account is the channel's source, not the destination. (A channel's \"source\" and \"owner\" are the same.) All information retrieved is relative to a particular version of the ledger.",
        "externalDocs": {
          "url": "https://xrpl.org/account_channels.html"
        },
        "operationId": "getAccountChannels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountChannelsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountChannelsResponse"
                }
              }
            },
            "description": "This endpoint returns information about an account's Payment Channels. This includes only channels where the specified account is the channel's source, not the destination. (A channel's \"source\" and \"owner\" are the same.) All information retrieved is relative to a particular version of the ledger."
          }
        },
        "summary": "Get Account Payment Channels",
        "tags": [
          "Account"
        ]
      }
    },
    "/api/ledger/v1.0/account_currencies": {
      "post": {
        "description": "This endpoint retrieves a list of currencies that an account can send or receive, based on its trust lines. (This is not a thoroughly confirmed list, but it can be used to populate user interfaces.)",
        "externalDocs": {
          "url": "https://xrpl.org/account_currencies.html"
        },
        "operationId": "getAccountCurrencies",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCurrenciesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCurrenciesResponse"
                }
              }
            },
            "description": "This endpoint retrieves a list of currencies that an account can send or receive, based on its trust lines. (This is not a thoroughly confirmed list, but it can be used to populate user interfaces.)"
          }
        },
        "summary": "Get Account Currencies",
        "tags": [
          "Account"
        ]
      }
    },
    "/api/ledger/v1.0/account_info": {
      "post": {
        "description": "The endpoint command retrieves information about an account, its activity, and its XRP balance. All information retrieved is relative to a particular version of the ledger.",
        "operationId": "getAccountInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoResponse"
                }
              }
            },
            "description": "The endpoint command retrieves information about an account, its activity, and its XRP balance. All information retrieved is relative to a particular version of the ledger."
          }
        },
        "summary": "Get Account Info",
        "tags": [
          "Account"
        ]
      }
    },
    "/api/ledger/v1.0/account_lines": {
      "post": {
        "description": "Get info about an account's trust lines.",
        "operationId": "getAccountLines",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLinesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountLinesResponse"
                }
              }
            },
            "description": "Get info about an account's trust lines."
          }
        },
        "summary": "Get Account Lines",
        "tags": [
          "Account"
        ]
      }
    },
    "/api/ledger/v1.0/ledger": {
      "post": {
        "description": "Get info about a ledger version.",
        "externalDocs": {
          "url": "https://xrpl.org/ledger.html"
        },
        "operationId": "getLedgerInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LedgerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerResponse"
                }
              }
            },
            "description": "Get info about a ledger version."
          }
        },
        "summary": "Get Ledger Info",
        "tags": [
          "Ledger"
        ]
      }
    },
    "/api/ledger/v1.0/ledger_closed": {
      "get": {
        "description": "Get the latest closed ledger version.",
        "externalDocs": {
          "url": "https://xrpl.org/ledger_closed.html"
        },
        "operationId": "getLedgerClosed",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerClosedResponse"
                }
              }
            },
            "description": "Get the latest closed ledger version."
          }
        },
        "summary": "Get Latest Closed Ledger Version",
        "tags": [
          "Ledger"
        ]
      }
    },
    "/api/ledger/v1.0/ledger_current": {
      "get": {
        "description": "Get the current working ledger version.",
        "externalDocs": {
          "url": "https://xrpl.org/ledger_current.html"
        },
        "operationId": "getLedgerCurrent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerCurrentResponse"
                }
              }
            },
            "description": "Get the current working ledger version."
          }
        },
        "summary": "Get Current In-Progress Ledger Info",
        "tags": [
          "Ledger"
        ]
      }
    },
    "/api/ledger/v1.0/ledger_entry": {
      "post": {
        "description": "Get one element from a ledger version.",
        "externalDocs": {
          "url": "https://xrpl.org/ledger_entry.html"
        },
        "operationId": "getLedgerEntry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LedgerEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerEntryResponse"
                }
              }
            },
            "description": "Get one element from a ledger version."
          }
        },
        "summary": "Get Ledger Object",
        "tags": [
          "Ledger"
        ]
      }
    }
  }
}